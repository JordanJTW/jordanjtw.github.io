(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "../pkg/rust8.js":
/*!***********************!*\
  !*** ../pkg/rust8.js ***!
  \***********************/
/*! exports provided: __wbg_log_32b115cbc54f6f77, __wbg_random_01a0505ece69b3f1, __wbg_error_4bb6c2a97407129a, __wbg_new_59cb74e423758ede, __wbg_stack_558ba5917b466edd, __wbindgen_throw, Chip8, __wbindgen_object_drop_ref */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_log_32b115cbc54f6f77\", function() { return __wbg_log_32b115cbc54f6f77; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_random_01a0505ece69b3f1\", function() { return __wbg_random_01a0505ece69b3f1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_error_4bb6c2a97407129a\", function() { return __wbg_error_4bb6c2a97407129a; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_new_59cb74e423758ede\", function() { return __wbg_new_59cb74e423758ede; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_stack_558ba5917b466edd\", function() { return __wbg_stack_558ba5917b466edd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_throw\", function() { return __wbindgen_throw; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Chip8\", function() { return Chip8; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_object_drop_ref\", function() { return __wbindgen_object_drop_ref; });\n/* harmony import */ var _rust8_bg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rust8_bg */ \"../pkg/rust8_bg.wasm\");\n\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== _rust8_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint8Memory = new Uint8Array(_rust8_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nfunction __wbg_log_32b115cbc54f6f77(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n    try {\n        console.log(varg0);\n    } catch (e) {\n        console.error(\"wasm-bindgen: imported JS function that was not marked as `catch` threw an error:\", e);\n        throw e;\n    }\n}\n\nfunction __wbg_random_01a0505ece69b3f1() {\n    try {\n        return Math.random();\n    } catch (e) {\n        console.error(\"wasm-bindgen: imported JS function that was not marked as `catch` threw an error:\", e);\n        throw e;\n    }\n}\n\nfunction _assertNum(n) {\n    if (typeof(n) !== 'number') throw new Error('expected a number argument');\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm(arg) {\n    const ptr = _rust8_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_malloc\"](arg.length * 1);\n    getUint8Memory().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction __wbg_error_4bb6c2a97407129a(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n\n    varg0 = varg0.slice();\n    _rust8_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](arg0, arg1 * 1);\n\n    try {\n        console.error(varg0);\n    } catch (e) {\n        console.error(\"wasm-bindgen: imported JS function that was not marked as `catch` threw an error:\", e);\n        throw e;\n    }\n}\n\nconst heap = new Array(32);\n\nheap.fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    if (typeof(heap_next) !== 'number') throw new Error('corrupt heap');\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction __wbg_new_59cb74e423758ede() {\n    try {\n        return addHeapObject(new Error());\n    } catch (e) {\n        console.error(\"wasm-bindgen: imported JS function that was not marked as `catch` threw an error:\", e);\n        throw e;\n    }\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nlet passStringToWasm;\nif (typeof cachedTextEncoder.encodeInto === 'function') {\n    passStringToWasm = function(arg) {\n\n        if (typeof(arg) !== 'string') throw new Error('expected a string argument');\n\n        let size = arg.length;\n        let ptr = _rust8_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_malloc\"](size);\n        let writeOffset = 0;\n        while (true) {\n            const view = getUint8Memory().subarray(ptr + writeOffset, ptr + size);\n            const { read, written } = cachedTextEncoder.encodeInto(arg, view);\n            arg = arg.substring(read);\n            writeOffset += written;\n            if (arg.length === 0) {\n                break;\n            }\n            ptr = _rust8_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_realloc\"](ptr, size, size * 2);\n            size *= 2;\n        }\n        WASM_VECTOR_LEN = writeOffset;\n        return ptr;\n    };\n} else {\n    passStringToWasm = function(arg) {\n\n        if (typeof(arg) !== 'string') throw new Error('expected a string argument');\n\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = _rust8_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_malloc\"](buf.length);\n        getUint8Memory().set(buf, ptr);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    };\n}\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== _rust8_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint32Memory = new Uint32Array(_rust8_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint32Memory;\n}\n\nfunction __wbg_stack_558ba5917b466edd(ret, arg0) {\n    try {\n\n        const retptr = passStringToWasm(getObject(arg0).stack);\n        const retlen = WASM_VECTOR_LEN;\n        const mem = getUint32Memory();\n        mem[ret / 4] = retptr;\n        mem[ret / 4 + 1] = retlen;\n\n    } catch (e) {\n        console.error(\"wasm-bindgen: imported JS function that was not marked as `catch` threw an error:\", e);\n        throw e;\n    }\n}\n\nfunction __wbindgen_throw(ptr, len) {\n    throw new Error(getStringFromWasm(ptr, len));\n}\n\nfunction freeChip8(ptr) {\n\n    _rust8_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_chip8_free\"](ptr);\n}\n/**\n*/\nclass Chip8 {\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeChip8(ptr);\n    }\n\n    /**\n    * @returns {}\n    */\n    constructor() {\n        this.ptr = _rust8_bg__WEBPACK_IMPORTED_MODULE_0__[\"chip8_new\"]();\n    }\n    /**\n    * @param {number} x\n    * @param {number} y\n    * @returns {boolean}\n    */\n    check_pixel(x, y) {\n        if (this.ptr === 0) {\n            throw new Error('Attempt to use a moved value');\n        }\n        _assertNum(x);\n        _assertNum(y);\n        return (_rust8_bg__WEBPACK_IMPORTED_MODULE_0__[\"chip8_check_pixel\"](this.ptr, x, y)) !== 0;\n    }\n    /**\n    * @param {Uint8Array} rom\n    * @returns {void}\n    */\n    load(rom) {\n        if (this.ptr === 0) {\n            throw new Error('Attempt to use a moved value');\n        }\n        const ptr0 = passArray8ToWasm(rom);\n        const len0 = WASM_VECTOR_LEN;\n        return _rust8_bg__WEBPACK_IMPORTED_MODULE_0__[\"chip8_load\"](this.ptr, ptr0, len0);\n    }\n    /**\n    * @param {number} key\n    * @returns {void}\n    */\n    press_key(key) {\n        if (this.ptr === 0) {\n            throw new Error('Attempt to use a moved value');\n        }\n        _assertNum(key);\n        return _rust8_bg__WEBPACK_IMPORTED_MODULE_0__[\"chip8_press_key\"](this.ptr, key);\n    }\n    /**\n    * @param {number} key\n    * @returns {void}\n    */\n    release_key(key) {\n        if (this.ptr === 0) {\n            throw new Error('Attempt to use a moved value');\n        }\n        _assertNum(key);\n        return _rust8_bg__WEBPACK_IMPORTED_MODULE_0__[\"chip8_release_key\"](this.ptr, key);\n    }\n    /**\n    * @param {number} timer_delta\n    * @returns {void}\n    */\n    update(timer_delta) {\n        if (this.ptr === 0) {\n            throw new Error('Attempt to use a moved value');\n        }\n        _assertNum(timer_delta);\n        return _rust8_bg__WEBPACK_IMPORTED_MODULE_0__[\"chip8_update\"](this.ptr, timer_delta);\n    }\n    /**\n    * @returns {void}\n    */\n    tick() {\n        if (this.ptr === 0) {\n            throw new Error('Attempt to use a moved value');\n        }\n        return _rust8_bg__WEBPACK_IMPORTED_MODULE_0__[\"chip8_tick\"](this.ptr);\n    }\n}\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction __wbindgen_object_drop_ref(i) { dropObject(i); }\n\n\n\n//# sourceURL=webpack:///../pkg/rust8.js?");

/***/ }),

/***/ "../pkg/rust8_bg.wasm":
/*!****************************!*\
  !*** ../pkg/rust8_bg.wasm ***!
  \****************************/
/*! exports provided: memory, __rustc_debug_gdb_scripts_section__, __wbg_chip8_free, chip8_new, chip8_check_pixel, chip8_load, chip8_press_key, chip8_release_key, chip8_update, chip8_tick, __wbindgen_malloc, __wbindgen_realloc, __wbindgen_free */
/***/ (function(module, exports, __webpack_require__) {

eval("\"use strict\";\n// Instantiate WebAssembly module\nvar wasmExports = __webpack_require__.w[module.i];\n__webpack_require__.r(exports);\n// export exports from WebAssembly module\nfor(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n// exec imports from WebAssembly module (for esm order)\n/* harmony import */ var m0 = __webpack_require__(/*! ./rust8 */ \"../pkg/rust8.js\");\n\n\n// exec wasm module\nwasmExports[\"__webpack_init__\"]()\n\n//# sourceURL=webpack:///../pkg/rust8_bg.wasm?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _pkg_rust8__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../pkg/rust8 */ \"../pkg/rust8.js\");\n\n\nlet rom =\n  \"bgVlAGsGagCjDNqxegQ6QBIIewI7EhIGbCBtH6MQ3NEi9mAAYQCjEtARcAijDtARYEDwFfAHMAASNMYPZx5oAWn/ow7WcaMQ3NFgBOChfP5gBuChfAJgP4wC3NGjDtZxhoSHlGA/hgJhH4cSRx8SrEYAaAFGP2j/RwBpAdZxPwESqkcfEqpgBYB1PwASqmAB8BiAYGH8gBKjDNBxYP6JAyL2dQEi9kVgEt4SRmn/gGCAxT8BEsphAoAVPwES4IAVPwES7oAVPwES6GAg8BijDn7/gOCABGEA0BE+ABIwEt54/0j+aP8S7ngBSAJoAWAE8Bhp/xJwoxT1M/Jl8SljN2QA00VzBfIp00UA7uAAgAD8AKoAAAAAAA==\";\n\nfunction load_rom() {\n\tlet binary_data = window.atob(rom);\n\tvar data = new Uint8Array(new ArrayBuffer(binary_data.length));\n\n\tfor (var i = 0; i < binary_data.length; i++) {\n\t  data[i] = binary_data.charCodeAt(i);\n\t}\n\treturn new Uint8Array(data);\n}\n\nvar chip8 = new _pkg_rust8__WEBPACK_IMPORTED_MODULE_0__[\"Chip8\"]();\nchip8.load(load_rom());\n\nvar canvas = document.getElementById(\"gameView\");\nvar ctx = canvas.getContext(\"2d\");\n\nlet pixel_width = Math.floor(canvas.width / 64);\nlet pixel_height = Math.floor(canvas.height / 32);\n\nvar window_padx = (canvas.width - pixel_width * 64) / 2;\nvar window_pady = (canvas.height - pixel_height * 32) / 2;\n\nfunction build_grad(ctx, x, y, radius) {\n\tlet grd = ctx.createRadialGradient(x, y, radius * 0.03, x, y, radius * 0.9);\n\tgrd.addColorStop(0, \"#00F200\");\n\tgrd.addColorStop(1, \"black\");\n\treturn grd;\n}\n\nwindow.addEventListener(\"keydown\", (event) => {\n\tchip8.press_key(parseInt(event.key));\n});\n\nwindow.addEventListener(\"keyup\", (event) => {\n\tchip8.release_key(parseInt(event.key));\n});\n\nlet use_window_gradient = true;\n\nlet wingrd = build_grad(ctx, canvas.width / 2, canvas.height / 2, canvas.width);\nvar previous_time = new Date().getTime();\n\nfunction run_loop() {\n\tchip8.tick();\n\n\tlet current_time = new Date().getTime();\n\tchip8.update((current_time - previous_time) / 1000);\n\tprevious_time = current_time;\n\n\tsetTimeout(run_loop, 0);\n}\n\nfunction clear_screen() {\n\tctx.fillStyle = \"#000000\";\n  \tctx.fillRect(window_padx, window_pady, pixel_width * 64, pixel_height * 32);\n}\n\nfunction draw_screen() {\n  for (var y = 0; y < 32; ++y) {\n    for (var x = 0; x < 64; ++x) {\n      let startX = window_padx + x * pixel_width;\n      let startY = window_pady + y * pixel_height;\n\n      if (chip8.check_pixel(x, y)) {\n        ctx.fillStyle = use_window_gradient\n          ? wingrd\n          : build_grad(\n              ctx,\n              startX + pixel_width / 2,\n              startY + pixel_height / 2,\n              pixel_width\n            );\n        ctx.fillRect(startX, startY, pixel_width, pixel_height);\n      }\n    }\n  }\n}\n\nfunction draw_loop() {\n\tclear_screen();\n\tdraw_screen();\n\tsetTimeout(draw_loop, 33);\n}\n\ndraw_loop();\nrun_loop();\n\n//# sourceURL=webpack:///./index.js?");

/***/ })

}]);